ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B, group = B)) +
labs(y = "mean of Y")
# please ignore this code chunk; do not edit
knitr::opts_chunk$set(echo = TRUE)
# some functions for validation
chk_numeric <- function(x) {if (exists(x)) {is.numeric(get(x))} else FALSE}
chk_logical <- function(x) {if (exists(x)) {is.logical(get(x))} else FALSE}
chk_tibble <- function(x) {if (exists(x)) {is.tibble(get(x))} else FALSE}
has_cols <- function(x, y) {if (chk_tibble(x)) {length(intersect(names(get(x)), y))==length(y)} else FALSE}
library("tidyverse") # you're welcome
cat_int <- 1043.3
print(cat_int)
cat_slp <- 165.9
print(cat_slp)
cat_sav <- cat_int + cat_slp * 46
print(cat_sav)
dog_int <- 1043.3 - 97.8
print(dog_int)
dog_slp <- 165.9 - 14.1
print(dog_slp)
dog_sav <- dog_int + dog_slp * 18
print(dog_sav)
sig_diff <- FALSE
# this is your 'starter' table
# leave columns A, B as they are.
# you need to fill in values for: Y, mu, A_i, B_i, AB_ij, err
decomp <- tibble(A = rep(c("A1", "A2"), c(6, 6)),
B = rep(rep(c("B1", "B2"), c(3, 3)), 2),
mu =    100,
A_i =   ifelse(A == "A1", -5, 5),
B_j =   ifelse(B == "B1", 10, -10),
AB_ij = case_when(A_i * B_j > 0 ~ -2,
TRUE      ~ 2), # anything else,
err =   rnorm(12, 0, 4)) %>%
group_by(A, B) %>%
mutate(err = err - mean(err)) %>%
ungroup() %>%
mutate(Y = mu + A_i + B_j + AB_ij + err)
print(decomp)
my_data <- read_csv("subj_id,A,B,Y
1,A2,B1,-1.8115203909794269
2,A2,B2,-1.4406205948473265
3,A1,B2,-1.5208066149589117
4,A2,B1,0.5621490559754134
5,A1,B1,-3.289099091526972
6,A1,B2,3.808829093141069
7,A2,B1,-1.779770282688184
8,A1,B1,-2.676949065196
9,A1,B1,-4.531527397207272
10,A1,B2,-1.5818842067491712
11,A2,B2,0.7062981596402913
12,A2,B2,1.4059036893200894")
cell_means <- group_by(my_data, A, B) %>% summarise(y_mean = mean(Y))
print(cell_means)
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B, group = B)) +
labs(y = "mean of Y")
ds1_A <- FALSE
ds1_B <- TRUE
ds1_AB <- FALSE
ds2_A <- FALSE
ds2_B <- FALSE
ds2_AB <- TRUE
ds3_A <- TRUE
ds3_B <- TRUE
ds3_AB <- TRUE
# please ignore this code chunk; do not edit
knitr::opts_chunk$set(echo = TRUE)
# some functions for validation
chk_numeric <- function(x) {if (exists(x)) {is.numeric(get(x))} else FALSE}
chk_logical <- function(x) {if (exists(x)) {is.logical(get(x))} else FALSE}
chk_tibble <- function(x) {if (exists(x)) {is.tibble(get(x))} else FALSE}
has_cols <- function(x, y) {if (chk_tibble(x)) {length(intersect(names(get(x)), y))==length(y)} else FALSE}
library("tidyverse") # you're welcome
cat_int <- 1043.3
print(cat_int)
cat_slp <- 165.9
print(cat_slp)
cat_sav <- cat_int + cat_slp * 46
print(cat_sav)
dog_int <- 1043.3 - 97.8
print(dog_int)
dog_slp <- 165.9 - 14.1
print(dog_slp)
dog_sav <- dog_int + dog_slp * 18
print(dog_sav)
sig_diff <- FALSE
# this is your 'starter' table
# leave columns A, B as they are.
# you need to fill in values for: Y, mu, A_i, B_i, AB_ij, err
decomp <- tibble(A = rep(c("A1", "A2"), c(6, 6)),
B = rep(rep(c("B1", "B2"), c(3, 3)), 2),
mu =    100,
A_i =   ifelse(A == "A1", -5, 5),
B_j =   ifelse(B == "B1", 10, -10),
AB_ij = case_when(A_i * B_j > 0 ~ -2,
TRUE      ~ 2), # anything else,
err =   rnorm(12, 0, 4)) %>%
group_by(A, B) %>%
mutate(err = err - mean(err)) %>%
ungroup() %>%
mutate(Y = mu + A_i + B_j + AB_ij + err)
print(decomp)
my_data <- read_csv("subj_id,A,B,Y
1,A2,B1,-1.8115203909794269
2,A2,B2,-1.4406205948473265
3,A1,B2,-1.5208066149589117
4,A2,B1,0.5621490559754134
5,A1,B1,-3.289099091526972
6,A1,B2,3.808829093141069
7,A2,B1,-1.779770282688184
8,A1,B1,-2.676949065196
9,A1,B1,-4.531527397207272
10,A1,B2,-1.5818842067491712
11,A2,B2,0.7062981596402913
12,A2,B2,1.4059036893200894")
cell_means <- group_by(my_data, A, B) %>% summarise(y_mean = mean(Y))
print(cell_means)
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B, group = B)) +
labs(y = "mean of Y")
ds1_A <- FALSE
ds1_B <- TRUE
ds1_AB <- FALSE
ds2_A <- FALSE
ds2_B <- FALSE
ds2_AB <- TRUE
ds3_A <- TRUE
ds3_B <- TRUE
ds3_AB <- TRUE
cat_sav <- cat_int + cat_slp * 46
print(cat_sav)
dog_sav <- 1043.3 - 97.8 + (165.9 - 14.1) * 18
print(dog_sav)
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B, group = B)) +
labs(y = "mean of Y")
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(), size = 3) +
geom_line(aes(linetype = B, group = B)) +
labs(y = "mean of Y")
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B, group = B)) +
labs(y = "mean of Y")
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(group = B)) +
labs(y = "mean of Y")
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B, group = B)) +
labs(y = "mean of Y")
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B)) +
labs(y = "mean of Y")
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B, group = B)) +
labs(y = "mean of Y")
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B, group = A)) +
labs(y = "mean of Y")
## TODO: something with ggplot()
ggplot(cell_means, aes(A, y_mean)) +
geom_point(aes(shape = B), size = 3) +
geom_line(aes(linetype = B, group = B)) +
labs(y = "mean of Y")
# DO NOT REMOVE THIS BLOCK NOR ALTER ANYTHING IN THIS BLOCK!
knitr::opts_chunk$set(echo = TRUE)
# these functions are here for validation
.chk_numeric <- function(x) {if (exists(x)) {is.numeric(get(x))} else FALSE}
.chk_tibble <- function(x) {if (exists(x)) {is.tibble(get(x))} else FALSE}
.chk_matrix <- function(x) {if (exists(x)) {is.matrix(get(x))} else FALSE}
.has_only_cols <- function(x, y) {
if (.chk_tibble(x)) {
setequal(names(get(x)), y)
} else FALSE
}
.my_seed <- 83154549L
set.seed(.my_seed)
.assign_id <-
"06_lmem1"
library("tidyverse") # you're welcome
t00 <- 32.82
t11_sq <- 1225.2
gamma_00 <- -32.980
gamma_10 <- 9.341
sig_sq <- 718.9
## TODO: write code to randomly generate 18 bivariate observations
## Hint: How do you randomly generate bivariate data based on a covariance matrix?
## You've done this before, most recently on PST1.
## 'rmx' should be an 18x2 matrix
## the call to matrix() is just a placeholder
## it shows you how the resulting matrix should be structured
## you should be using a different function to create the matrix
cov_matrix <- matrix(c(30^2, 0.9*30*33,
0.9*30*33, 33^2), nrow = 2)
rmx <- MASS::mvrnorm(18, c(S0 = 0, S1 = 0), cov_matrix)
#matrix(rep(0, 36), nrow = 18,
#           dimnames = list(NULL, c("S_0s", "S_1s")))
obs <- tibble(Subject = factor(rep(seq_len(18), each = 10)),
Days = rep(0:9, 18),
gamma_00 = 310,  # replace with correct values
gamma_10 = 4,  # replace with correct values
e_ij = rnorm(180, mean = 0, sd = 0.25))      # replace with correct values
rmx_tibble <- as_tibble(rmx) %>% mutate(Subject = factor(row_number()))
simdata <- inner_join(rmx_tibble, obs, by = "Subject") %>% mutate(Reaction = gamma_00 + S0 +
(gamma_10 + S1) * Days +
e_ij) %>% select (Reaction, Days, Subject)
# print it out
simdata
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
demo <- read_csv("demographics2.csv") %>% drop_na() %>%
mutate(native_speaker = ifelse(native_speaker == "yes", 0, 1))
stroop <- read_csv("stroop2.csv") %>% drop_na() %>%
mutate(incongruent = ifelse(ink_colour == word, 0, 1)) %>%
filter(ink_colour == response)
join <- inner_join(demo, stroop, by = "subj_id")
model <- lmer(rt ~ native_speaker * incongruent + (1 | subj_id), data = join)
summary(model)
library(tidyverse)
library(lme4)
demo <- read_csv("demographics2.csv") %>% drop_na() %>%
mutate(native_speaker = ifelse(native_speaker == "yes", 0, 1))
stroop <- read_csv("stroop2.csv") %>% drop_na() %>%
mutate(incongruent = ifelse(ink_colour == word, 0, 1)) %>%
filter(ink_colour == response)
join <- inner_join(demo, stroop, by = "subj_id")
model <- lmer(rt ~ native_speaker * incongruent + (1 | subj_id), data = join)
summary(model)
library(tidyverse)
library(lme4)
demo <- read_csv("demographics2.csv") %>% drop_na() %>%
mutate(native_speaker = ifelse(native_speaker == "yes", 0, 1))
stroop <- read_csv("stroop2.csv") %>% drop_na() %>%
mutate(incongruent = ifelse(ink_colour == word, 0, 1)) %>%
filter(ink_colour == response)
join <- inner_join(demo, stroop, by = "subj_id")
model <- lmer(rt ~ native_speaker * incongruent + (1 | subj_id), data = join)
summary(model)
library(tidyverse)
library(lme4)
demo <- read_csv("demographics2.csv") %>% drop_na() %>%
mutate(native_speaker = ifelse(native_speaker == "yes", 0, 1))
stroop <- read_csv("stroop2.csv") %>% drop_na() %>%
mutate(incongruent = ifelse(ink_colour == word, 0, 1)) %>%
filter(ink_colour == response)
join <- inner_join(demo, stroop, by = "subj_id")
model <- lmer(rt ~ native_speaker * incongruent + (1 | subj_id), data = join)
summary(model)
## RUN THIS CHUNK FIRST, BUT DO NOT EDIT OR ALTER ANYTHING HERE.
library("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
.y <- function() "<span style=\"color:green\">yes</span>"
.n <- function() "<span style=\"color:red\">**NO**</span>"
.ce <- function(x) {
ex <- sapply(x, exists)
if (any(!ex)) {
allnames <- paste0("`", names(ex)[!ex], "`")
str <- paste0(paste(allnames, collapse = ","), "not found; check spelling and capitalization")
paste0("<span style=\"color:red\">", str, "</span>")
} else .y()
}
.tt <- function(var, fname) {
.var <- deparse(substitute(var))
result <- .n()
if (exists(.var)) {
if (is_tibble(var)) {
if (length(intersect(names(var), c("subj_id", fname))) == 2L) {
if (ncol(var) > 2L) {
result <- .y()
}
}
}
}
result
}
.cc <- function(var, class) {
.var <- deparse(substitute(var))
result <- .n()
if (exists(.var)) {
if (inherits(var, class)) {
result <- .y()
}
}
result
}
tbl_source <- tibble(subj_id = c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3),
Z = c("Z1", "Z2", "Z3", "Z4", "Z1", "Z2", "Z3", "Z4", "Z1", "Z2", "Z3", "Z4"))
.allvars <- c("covar", "mod_pred", "rt_chg", "b0", "b1", "prediction", "evidence", "my_tbl", "Q_eff", "X_eff", "QX_interaction")
covar <- 23.43*17.69 * 0.41
## RUN THIS CHUNK FIRST, BUT DO NOT EDIT OR ALTER ANYTHING HERE.
library("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
.y <- function() "<span style=\"color:green\">yes</span>"
.n <- function() "<span style=\"color:red\">**NO**</span>"
.ce <- function(x) {
ex <- sapply(x, exists)
if (any(!ex)) {
allnames <- paste0("`", names(ex)[!ex], "`")
str <- paste0(paste(allnames, collapse = ","), "not found; check spelling and capitalization")
paste0("<span style=\"color:red\">", str, "</span>")
} else .y()
}
.tt <- function(var, fname) {
.var <- deparse(substitute(var))
result <- .n()
if (exists(.var)) {
if (is_tibble(var)) {
if (length(intersect(names(var), c("subj_id", fname))) == 2L) {
if (ncol(var) > 2L) {
result <- .y()
}
}
}
}
result
}
.cc <- function(var, class) {
.var <- deparse(substitute(var))
result <- .n()
if (exists(.var)) {
if (inherits(var, class)) {
result <- .y()
}
}
result
}
tbl_source <- tibble(subj_id = c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3),
Z = c("Z1", "Z2", "Z3", "Z4", "Z1", "Z2", "Z3", "Z4", "Z1", "Z2", "Z3", "Z4"))
.allvars <- c("covar", "mod_pred", "rt_chg", "b0", "b1", "prediction", "evidence", "my_tbl", "Q_eff", "X_eff", "QX_interaction")
mod_pred <- -4.13 + -52.39*5
mod_pred <- (548.9-4.13) + (313-52.39)*5
mod_pred <- (548.9-4.13) + (313-52.39)*5
mod_pred <- (299.213-4.13) + (6.131-52.39)*5
rt_chg <- 6.131 * 9
mod_pred <- (299.213-4.13) + (6.131-52.39)*9
rt_chg <- 6.131 * 9
prediction <- 1.62-0.28 + (0.22-0.13)*7
prediction <- 1.62-0.28 + (0.22-0.13)*7
prediction1 <- 1.62-0.28 + (0.22-0.13)*7
prediction2 <- 1.62 + (0.22)*7
# DO NOT REMOVE THIS BLOCK NOR ALTER ANYTHING IN THIS BLOCK!
knitr::opts_chunk$set(echo = TRUE)
# these functions are here for validation
.chk_numeric <- function(x) {if (exists(x)) {is.numeric(get(x))} else FALSE}
.chk_tibble <- function(x) {if (exists(x)) {is.tibble(get(x))} else FALSE}
.chk_matrix <- function(x) {if (exists(x)) {is.matrix(get(x))} else FALSE}
.has_only_cols <- function(x, y) {
if (.chk_tibble(x)) {
setequal(names(get(x)), y)
} else FALSE
}
.my_seed <- 83154549L
set.seed(.my_seed)
.assign_id <-
"06_lmem1"
library("tidyverse") # you're welcome
t00 <- 32.82
t11_sq <- 1225.2
gamma_00 <- -32.980
gamma_10 <- 9.341
sig_sq <- 718.9
## TODO: write code to randomly generate 18 bivariate observations
## Hint: How do you randomly generate bivariate data based on a covariance matrix?
## You've done this before, most recently on PST1.
## 'rmx' should be an 18x2 matrix
## the call to matrix() is just a placeholder
## it shows you how the resulting matrix should be structured
## you should be using a different function to create the matrix
cov_matrix <- matrix(c(30^2, 0.9*30*33,
0.9*30*33, 33^2), nrow = 2)
rmx <- MASS::mvrnorm(18, c(S0 = 0, S1 = 0), cov_matrix)
#matrix(rep(0, 36), nrow = 18,
#           dimnames = list(NULL, c("S_0s", "S_1s")))
obs <- tibble(Subject = factor(rep(seq_len(18), each = 10)),
Days = rep(0:9, 18),
gamma_00 = 310,  # replace with correct values
gamma_10 = 4,  # replace with correct values
e_ij = rnorm(180, mean = 0, sd = 25))      # replace with correct values
rmx_tibble <- as_tibble(rmx) %>% mutate(Subject = factor(row_number()))
simdata <- inner_join(obs, rmx_tibble, by = "Subject") %>% mutate(Reaction = gamma_00 + S0 + (gamma_10 + S1) * Days +
e_ij) %>% select (Reaction, Days, Subject)
# print it out
simdata
View(simdata)
View(simdata)
View(tbl_source)
View(rmx_tibble)
View(rmx)
## RUN THIS CHUNK FIRST, BUT DO NOT EDIT OR ALTER ANYTHING HERE.
library("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
.y <- function() "<span style=\"color:green\">yes</span>"
.n <- function() "<span style=\"color:red\">**NO**</span>"
.ce <- function(x) {
ex <- sapply(x, exists)
if (any(!ex)) {
allnames <- paste0("`", names(ex)[!ex], "`")
str <- paste0(paste(allnames, collapse = ","), "not found; check spelling and capitalization")
paste0("<span style=\"color:red\">", str, "</span>")
} else .y()
}
.tt <- function(var, fname) {
.var <- deparse(substitute(var))
result <- .n()
if (exists(.var)) {
if (is_tibble(var)) {
if (length(intersect(names(var), c("subj_id", fname))) == 2L) {
if (ncol(var) > 2L) {
result <- .y()
}
}
}
}
result
}
.cc <- function(var, class) {
.var <- deparse(substitute(var))
result <- .n()
if (exists(.var)) {
if (inherits(var, class)) {
result <- .y()
}
}
result
}
tbl_source <- tibble(subj_id = c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3),
Z = c("Z1", "Z2", "Z3", "Z4", "Z1", "Z2", "Z3", "Z4", "Z1", "Z2", "Z3", "Z4"))
.allvars <- c("covar", "mod_pred", "rt_chg", "b0", "b1", "prediction", "evidence", "my_tbl", "Q_eff", "X_eff", "QX_interaction")
covar <- 23.43*17.69 * 0.41
mod_pred <- (299.213-4.13) + (6.131-52.39)*9
rt_chg <- 6.131 * 9
b0 <- 1.62
b1 <- 0.22
#got confused at whether b1 was meant to be program or hours
prediction2 <- 1.62 + (0.22)*7
evidence <- FALSE
my_tbl <- tbl_src%>%
mutate(V2 = if_else(Z == "Z2", k-1/k, -1/k),
V3 = if_else(Z == "Z3", 3/4, -1/4),
V4 = if_else(Z == "Z4", 3/4, -1/4))
my_tbl <- tbl_src %>%
mutate(V2 = if_else(Z == "Z2", k-1/k, -1/k),
V3 = if_else(Z == "Z3", 3/4, -1/4),
V4 = if_else(Z == "Z4", 3/4, -1/4))
my_tbl <- tbl_source %>%
mutate(V2 = if_else(Z == "Z2", k-1/k, -1/k),
V3 = if_else(Z == "Z3", 3/4, -1/4),
V4 = if_else(Z == "Z4", 3/4, -1/4))
my_tbl <- tbl_source %>%
mutate(V2 = if_else(Z == "Z2", 3/4, -1/4),
V3 = if_else(Z == "Z3", 3/4, -1/4),
V4 = if_else(Z == "Z4", 3/4, -1/4))
View(my_tbl)
install.packages(c("backports", "codetools", "colorspace", "cpp11", "dbplyr", "generics", "KernSmooth", "lubridate", "officer", "openxlsx", "quantreg", "R6", "rstudioapi", "testthat", "tinytex", "xfun"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
setwd("~/Documents/GitHub/voice-classifier")
source <- read_csv("results.csv")
View(source)
ggplot(source) + geom_boxplot()
source <- read_csv("results.csv")
source_wide <- pivot_wider(source, X1)
source <- read_csv("results.csv")
source_wide <- pivot_wider(source, X1, value)
source <- read_csv("results.csv")
source_wide <- pivot_wider(source, X1, value)
source <- read_csv("results.csv")
source_wide <- pivot_longer(source, X1, value)
source <- read_csv("results.csv")
source_wide <- pivot_longer(source, X1, value)
source <- read_csv("results.csv")
source_wide <- pivot_longer(source, X1, value)
source <- read_csv("results.csv")
source_wide <- pivot_longer(source, X1, X1)
source <- read_csv("results.csv")
source_wide <- pivot_longer(source, names_to = "income", values_to = "count")
source <- read_csv("results.csv")
source_wide <- pivot_longer(source, names_to = "income", values_to = "count")
source <- read_csv("results.csv")
source_wide <- pivot_longer(source, X1, names_to = "income", values_to = "count")
View(source_wide)
source <- read_csv("results.csv")
source_wide <- pivot_longer(source, "NV+V-NV":"V-V", names_to = "income", values_to = "count")
View(source_wide)
source <- read_csv("results.csv")
source_long <- pivot_longer(source, "NV+V-NV":"V-V", names_to = "condition", values_to = "accuracy")
ggplot(source, aes(x = condition, y = accuracy)) + geom_boxplot()
ggplot(source_long, aes(x = condition, y = accuracy)) + geom_boxplot()
ggplot(source_long, aes(x = condition, y = accuracy)) + geom_boxplot() + geom_violin()
ggplot(source_long, aes(x = condition, y = accuracy)) + geom_boxplot()
